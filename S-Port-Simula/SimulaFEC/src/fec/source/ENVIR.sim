class ENVIRONMENT_INTERFACE; begin
	
	integer PASS_NO;
	integer exitCode;


	text SourceDirName; -- = "C:/GitHub/SimulaCompiler/Simula/src/sport/rts";
	boolean noConsole;
	text SPORT_SourceFileName; -- = SourceDirName & "/ModuleName";
	text SPORT_SCodeFileName;
	text SPORT_SysInsertDirName;
	text ListingFileName;
	text Selectors; -- = "AZ";
	text PredefFileName = "C:/GitHub/EclipseWorkSpaces/S-Port-Simula/FILES/Attrs/FEC/PREDEF.atr";
	text XmessageFileName = "C:/WorkSpaces/SPort-System/S_Port/src/sport/fec/FECERROR.txt";
	integer GenerateScode = 1;
	integer MaxErrors = 50;
	integer GiveNotes = 1;
	integer Recompilation = 0;
	
%	 *  Used by getIntInfo.
%	 *  Result: 0 - minimal information for error reporting.
%	 *  		1 - information at the module and block level, but no information about the attributes.
%	 *  		2 - complete information generated, including information about all attributes.	 */
	integer SimobLevel = 0;
	
	integer FEC_Verbose;
	integer FEC_TraceScode;
	integer FEC_TraceLevel;

%    Used by giveTextInfo(1) The identifier of a class or procedure being separately compiled.
%    E.g class or procedure identifier
	text currentModuleID;

%    Used by giveTextInfo(2)The identifier given in an external declaration that is being processed.
%    E.g class or procedure identifier
	text extIdent;

%    Used by giveTextInfo(3) The external identification given in an external declaration that
%    is being processed. E.g. FileName
	text extFile;


	procedure INIT; begin
		integer i; boolean more; text arg;
		
		PASS_NO := 1;
		SPORT_SysInsertDirName :- "C:/WorkSpaces/SPort-System/S_Port/src/sport/rts";
		Selectors :- "AZ";
		
		setRuntimeOptions
	end;
	
    

%    Returns the external attribute file name.
%    
%    Used by ENVIRONMENT'getTextInfo
%    @return the external attribute file name
	text procedure getExternalAttributeFileName; begin
		-- 12: What is the name of the attribute file for an external declaration?
		-- Before this request is issued, the environment will have received the
		-- identifier (extIdent) and the
		-- external identifier (extFile) for the external declaration through the
		-- routine give_textinfo
%		if (extFile != null) {
%			return (extFile);
%		}
		text fileName; fileName :- createSubfileName("temp", extIdent & ".atr");
%		File file = new File(fileName);
%		if (!file.exists()) {
%			String name = extIdent;
%			int i = name.indexOf('.');
%			if (i > 0)
%				name = name.substring(0, i);
%			fileName = SPORT_SysInsertDirName & "/temp/" & name & ".atr";
%			file = new File(fileName);
%		}
		getExternalAttributeFileName :- fileName;
	end;

%    =================================================================
%    S-PORT Extension Procedure getTextInfo.
%    =================================================================
%    <pre>
%    The routine getTextInfo is defined to get all information from the
%    environment to the front-end that must be given as a text.
%    
%    The parameter index is an integer that specifies what information we request.
%    The result will be a string which is filled into result. The export parameter
%    filled gives the number of characters in the string.
%    
%    Index: Interpretation:
%    
%    1 What is the name of the source input file? Result will give the name.
%    
%    2 What is the name of the listing file? Result will give the file name. If no
%    such output is to be produced, then the string will be empty.
%    
%    3 What is the name of the file for separate output of diagnostics messages?
%    Result will give the file name. If no such output is to be produced, then the
%    string will be empty.
%    
%    4 What is the name of the file for storing the normal (byte packed) S-code?
%    Result will give the file name. If no such output is to be produced, then the
%    string will be empty.
%    
%    5 What is the name of the file for storing decimally coded S-code? Result
%    will give the file name. If no such output is to be produced, then the string
%    will be empty.
%    
%    6 What is the name of the file for storing textually coded S-code? Result
%    will give the file name. If no such output is to be produced, then the string
%    will be empty.
%    
%    7 What is the name of the scratch file to be used for storing the
%    intermediate code between the passes in the front-end? Result will give the
%    name of the file.
%    
%    8 What is the name of the scratch file to be used for storing the declaration
%    structures between the passes in the front-end? Result will give the name of
%    the file.
%    
%    9 Reserved for further scratch file requests. Result will give the name of
%    the file.
%    
%    10 Reserved for further scratch file requests. Result will give the name of
%    the file.
%    
%    11 What is the name of the attribute file for the current compilation? This
%    will only be necessary for a separate compilation. This file will be used as
%    the front-end's attribute file. (Cf. section 4.6) Result will give the name
%    of the file.
%    
%    12 What is the name of the attribute file for an external declaration? Before
%    this request is issued, the environment will have received the identifier and
%    the external identifier for the external declaration through the routine
%    give_textinfo described below. (Cf. section 4.6) Result will give the name of
%    the file.
%    
%    13 What is the environment part of the program head? (See below) Result will
%    give the text string.
%    
%    14 What is the module identifier to be used for the current compilation? (Cf.
%    section 4.6) This call will only be made for a separate compilation. Result
%    will give the text string.
%    
%    15 What is the check code to be used for the current compilation? (Cf.
%    section 4.6) This call will only be made for a separate compilation. Result
%    will give the text string. If the empty string is delivered then the
%    date_and_time string identifying this compilation will be used.
%    
%    16 What is the system debugging option string? The default answer here should
%    be the empty string.
%    
%    17 Not used.
%    
%    18 Not used.
%    
%    19 What is the file name of the attribute file for the predefined classes and
%    procedures (the class PREDEF)?
%    
%    20 What is the file name for the attribute file for the class SIMSET?
%    
%    21 What is the file name for the attribute file for the class SIMULATION?
%    
%    22 What is the file name of a file containing seldom used information for the
%    front end compiler, such as extended error messages.
%    
%    23 What is the file name of a file containing seldom used information for the
%    run time system, such as extended error messages.
%    
%    24 What is the identification string of the current execution? The answer
%    should be as defined for procedure "simulaid" in the SIMULA Standard, section
%    9.6. If the answer is the empty string, RTS will fill out the first field
%    (SIMULA system name) with an identification of the current S-port release,
%    and leave the remainding fields empty (i.e. the release info will be
%    terminated by 21 exclamation marks).
%    
%    A short comment is necessary on the program head string.
%    According to the definition an S-program should start with the
%    keyword program followed by a string. This string is used to identify the compilation.
%    The string will be given according to the following syntax:
%    "< a >'< b >'< c >"
%    The three parts of the string are:
%    < a > This is the date and time of compilation given through the result from a call on
%    the routine date_and_time.
%    < b > This is an identifiaction of the front-end compiler chosen by itself to identify
%    the version of the compiler.
%    < c > This is an identification of the S-code compiler supplied to the front-end
%    compiler when get_textinfo is called with index 13 (see page 15).

	text procedure ENV_getTextInfo(index); integer index; begin
		text res;
		switch (1:25) index begin
		when 1  do res :- SPORT_SourceFileName;
		when 2  do res :- listingFileName;
		when 4  do res :- SPORT_SCodeFileName;
		when 6  do res :- "#sysout";
		when 7  do res :- createSubfileName("temp", getModuleName & ".tmp"); -- ScratchFileName
		when 11 do res :- createSubfileName("temp", currentModuleID & ".atr"); -- AttributeOutputFileName
		when 12 do res :- getExternalAttributeFileName;
		when 13 do res :- "/JAVA";
		when 14 do res :- currentModuleID;
		when 15 do res :- "abracadab";
		when 16 do res :- Selectors; -- options and selectors
		when 19 do res :- PredefFileName; -- Name of attribute file for the predefined classes etc.
		when 22 do res :- XmessageFileName; -- Name of a file containing seldom used information
		when 25 do begin
%			File file = new File(RTS_SPORT_Option.getSourceFileName());
%			String ModuleIdent = file.getName();
%			ModuleIdent = ModuleIdent.substring(0, ModuleIdent.length() - 4).toLowerCase();
%			res :-  (new RTS_TXT(ModuleIdent)); -- Modid par of source file name in lower case
			outtext("NOT IMPL: getTextInfo(25)"); terminate_program;
			end;
		when none do
			begin outtext("NOT IMPL: getTextInfo(index)"); outimage; exit(-1); end;
		end;
		ENV_getTextInfo :- res;
		if FEC_TraceLevel > 0 then begin
			outtext("ENVIR.getTextInfo: index="); outint(index, 0); outtext(", res=" & res); outimage;
		end;
	end;


%    =================================================================
%    S-PORT Extension Procedure getIntInfo.
%    =================================================================
%    <pre>
%    The routine get_intinfo is defined to get all information from the environment that
%    can be coded as an integer.
%    
%    The parameter index is an integer specifying what information is requested. The
%    result will be an integer whose interpretation gives the specified information. The
%    result is given for each value of index as follows:
%    Index: Interpretation:
%    1 NOT USED
%    
%    2 Is a source listing wanted?
%    Result: 0 - No.
%    >0 - Yes. The listing will be a copy of the source text, where each line is prefixed by
%    its number.
%    
%    3 Should begin/end counters be included in the source listing?
%    Result=0 means no, otherwise yes.
%    
%    4 What is the maximum number of error messages to be given?
%    Result will be the number of messages.
%    
%    5 Should warning messages be suppressed?
%    Result=0 means no, otherwise yes.
%    
%    6 Should a cross-reference listing be produced?
%    Result=0 means no, otherwise yes.
%    
%    7/// ) What is the image length for the listing file?
%    Result will be the number of characters in the image.
%    
%   /// ) These calls are only made after get_textinfo(2) (asking for name of the listing file)
%    is called, and only if listing is wanted.
%    
%    
%    8 What is the line length of the source file?
%    Result will be the number of characters in the image. 
%    
%    9 Should test for none be ommitted at remote access?
%    Result=0 means no, otherwise yes.
%    
%    10 Should checking of indices be ommitted at array access?
%    Result: 0 - Complete checking of array indices
%    1 - Partial checking of indices
%    2 - No checking will be done.
%    
%    11 What is the level of information wanted from the symbolic dump routine?
%    Result: 0 - The symbolic dump module is not to be included
%    1 - The symbolic dump routine is included
%    2 - Individual instances of an object shall carry a count for identification
%    3 - Objects shall carry information of all identifier names.
%    
%    12 Should inclusion be made for production of a dynamic profile of the program
%    execution?
%    Result=0 means no inclusion, otherwise assignment counts are to be included
%    
%    13 Should inclusion be made for full tracing of control flow at run-time?
%    Result=0 means no inclusion, otherwise full inclusion.
%    
%    14 Should inclusion be made for interactive debugging of the program?
%    Result=0 means no inclusion, otherwise full inclusion.
%    
%    15 What is the level of debug information wanted in case of a run time error?
%    Result: 0 - no debugging information is wanted
%    1 - a diagnostic message and the source program line number where the error
%    occurred are wanted
%    2 - in addition to the above the static link and the dynamic link at the point of error
%    are wanted
%    3 - in addition to the above the sequencing sets of all SIMULATION blocks and the
%    local sequence controls of all scheduled processes are wanted
%    4 - in addition to the above the local sequence controls of all non-terminated objects
%    are wanted
%    5 - in addition to the above all referable datastructures are wanted.
%    
%    16 Is tracing of control flow wanted?
%    Result: 0 - no tracing is wanted
%    >0 - the number of messages wanted is given
%    <0 - tracing messages are printed to a buffer of size -(result), and only listed in case
%    of a run-time error
%    
%    17 Is tracing of data flow wanted?
%    Result: 0 - no tracing is wanted
%    >0 - the number of messages wanted is given
%    <0 - tracing messages are printed to a buffer of size -(result), and only listed in case
%    of a run-time error
%    Comment: If both control and data flow tracing are specified, they will go to the same
%    destination.
%    
%    18 What is the maximum amount of time (cpu-time) to be used for the execution?
%    Result will give the time, specified in 1/100 sec.
%    
%    19 Should the symbolic debugger SIMOB be entered prior to the execution of the
%    program, and at program termination? An answer greater than zero will give this
%    effect.
%    
%    20 What is the significant linelength of the source file image?
%    
%    21 What is the maximum index to setobj, getobj, and access instructions allowed in
%    this implementation. A response of 0 will give the limit 255.
%    
%    22 Mode of separate compilation ?
%    0: normal separate compilation
%    1: recompilation.
%    
%    23 Amount of pass information from FEC on listing or message file ?
%    0: No information.
%    1: Minimum.
%    2: Medium.
%    3: Maximum.
%    
%    24 How many work areas may be requested (see chapter 5)?
%    
%    30 What is the level of data information which must be produced at compile-time, in
%    order to observe the execution at run-time?
%    Result: 0 - minimal information for error reporting.
%    1 - information at the module and block level, but no information about the attributes.
%    2 - complete information generated, including information about all attributes.
%    SIMOB can always be used for observation, but the available information will
%    depend on this response.
%    
%    31 Should inclusion be made at compile-time for statement execution counts?
%    Result: 0 - no, statement execution counts not wanted
%    1 - yes, statement execution counts wanted
%    
%    32 Should inclusion be made at compile-time for processor usage measurements?
%    Result: 0 - no, measuring of processor usage not wanted
%    1 - yes, measuring of processor usage wanted
%    
%    33 Is interaction with the user possible in the current execution?
%    Result: 0 - no, this is not an interactive execution
%    1 - yes, this is an interactive execution
%    Note that SIMOB uses this.
%    
%    34 Should inclusion for the possibility of statement start exceptions be made at
%    compile-time by the S-Code Compiler?
%    Result: 0 - no, no start of statement exceptions will ever occur
%    1 - yes, start of statement exceptions may occur
%    
%    35 Should inclusion be made at compile-time for storage usage measurements?
%    Result: 0 - no, measuring of storage usage not wanted
%    1 - yes, measuring of storage usage wanted
%    
%    36 What is the maximum number of identifiers allowed in this program compilation.
%    Result will be the number allowed.
%    
%    37 What is the maximum number of constants allowed for this compilation. Result
%    will define the number.
%    
%    38 What is the maximum number of textual blocks allowed for this compilation.
%    Result will define the number.
%    
%    39 What is the maximum number of block levels allowed for this compilation. Result
%    will define the number.
%    
%    40 What is the maximum source depth allowed for this compilation. Result will
%    define the maximum.
%    
%    41 What is the maximum dynamic depth in this program compilation. Result will
%    define the maximum.
%    
%    42 What is the maximum number of parameters in a procedure call for this
%    compilation. Result will define the maximum.
%    
%    43-127 As defined in the current Release Description.
%    If the environment returns a value of zero for any of these indices, some default value
%    will be chosen by the system.

	integer procedure ENV_getIntInfo(index); integer index; begin
		integer res;
		switch (1:46) index begin
			when 1  do res := GenerateScode;
			when 4  do res := MaxErrors;
			when 5  do res := GiveNotes;
			when 7  do res := 260; -- Image length for the listing file
			when 9  do res := 1; -- NONE CHECK? Result=0 means no, otherwise yes.
			when 10 do res := 0; -- ARRAY BOUNDS CHECK ? Result: 0 - Complete checking, 1 - Partial checking, 2 - No checking will be done.
			when 22 do res := Recompilation; -- recomp
			when 30 do res := SimobLevel; -- simob_level
			when 44 do res := FEC_Verbose;
			when 45 do res := FEC_TraceScode;
			when 46 do res := FEC_TraceLevel;
			when none do begin outtext("NOT IMPL: getIntInfo(index)"); outimage; exit(-1); end;
		end;
		if FEC_TraceLevel > 0 then begin
			outtext("ENVIR.getIntInfo: index="); outint(index, 0); outtext(", res="); outint(res, 0); outimage;
		end;
		ENV_getIntInfo := res;
	end;

%    =================================================================
%    S-PORT Extension Procedure giveIntInfo.
%    =================================================================
%    <pre>
%    The routine give intinfo is defined to submit information from the front-end compiler
%    or the run-time system to the environment. This information is gathered from the
%    source input under compilation.
%    
%    The parameter index is an integer that specifies what information follows. Info will
%    be an integer carrying the following interpretation:
%    
%    Index: Interpretation:
%      1   A call with this index is done immediately before the termination of each pass, and
%          the value of info signals the situation after this pass, by the following coding:
%             0 - No user errors found. Go on with next pass.
%             1 - User errors are found, but go on with next pass.
%             2 - Reserved for fututre use, continuation is possible.
%             3 - No user errors found, but because of options etc. (e.g. that S-code should not be
%                 produced), the next pass should not be started.
%             4 - User errors found, therefore do not start next pass.
%             5 - Too many or too difficult user errors encountered. Therefore the current pass is
%                 terminated, and the next pass should not be started.
%             6 - An internal error in the compiler has occurred. Therefore the current pass is
%                 terminated, and the next pass should not be started.
%               
%      2   Info is the highest tag used in the S-code for this program.
%      3   Info is the number of source lines in the Simula program being compiled.
%      4   Info is the number of errors for this compilation.
%      5   Info is the number of warnings for this compilation.
%      6   Garbage collection information. Info=0 signals the start of a garbage collection, ENDOF hash:
%          Info=1 signals termination of g.c. (see 5.2).
%    </pre>
%    @param index case index
%    @param info the integer info

	procedure giveIntInfo(index, info); integer index, info; begin
		switch (1:5) index begin
			when 1 do begin
				exitCode := if info < 3 then 0 else -info;
				if FEC_TraceLevel > 0 then begin
					sysout.outtext("End of pass "); sysout.outint(PASS_NO, 0); sysout.outtext(": ");
					PASS_NO := PASS_NO + 1;
					switch (0:6) info begin
						when 0 do sysout.outtext("No user errors found. Go on with next pass.");
						when 1 do sysout.outtext("User errors are found, but go on with next pass.");
						when 2 do sysout.outtext("Reserved for fututre use, continuation is possible.");
						when 3 do sysout.outtext("No user errors found, but because of options etc. the next pass should not be started.");
						when 4 do sysout.outtext("User errors found, therefore do not start next pass.");
						when 5 do sysout.outtext("Too many or too difficult user errors encountered. Compiler should terminate.");
						when 6 do sysout.outtext("An internal error in the compiler has occurred. Compiler should terminate.");
					end;
				end;
			end;
			when 2 do if FEC_TraceLevel > 0 then begin sysout.outtext("Max tag="); outint(info, 0); end;
			when 3 do if FEC_TraceLevel > 0 then begin sysout.outtext("nSourceLines="); outint(info, 0); end;
			when 4 do if FEC_TraceLevel > 0 then begin sysout.outtext("nErrors="); outint(info, 0); end;
			when 5 do if FEC_TraceLevel > 0 then begin	sysout.outtext("nWarnings="); outint(info, 0); end;
			when none do begin outtext("NOT IMPL: giveIntInfo(index)"); outimage; exit(-1); end;
		end;
		if FEC_TraceLevel > 0 then sysout.outimage
	end;
	


%    =================================================================
%    S-PORT Extension Procedure giveTextInfo.
%    =================================================================
%    <pre>
%    The routine give_textinfo is defined to submit information from the front-end
%    compiler or the run-time system to the environment. This information is gathered
%    from the source input under compilation.
%    
%    The parameter index is an integer that specifies what information follows. Info will
%    be the string reference with the specific information as follows:
%    
%    Index: Interpretation:
%      1  The string info is the identifier of a class or procedure being separately compiled.
%      2  The string info is the identifier given in an external declaration that is being processed.
%      3  The string info is the external identification given in an external declaration that is being processed.
%    
%    E.g: When compiling:
%    
%    class SubSep; begin external class MainSeparat="some file"; ... end;
%    
%    Index:	Interpretation:
%      1		currentModuleID: SubSep
%      2		extIdent: MainSeparate
%      3		extFile: "some file"
%    
%    </pre>
%    
%    @param index case index
%    @param info text info

	procedure giveTextInfo(index, info); integer index; text info; begin
		if FEC_TraceLevel > 0 then begin
			outtext("ENVIR.giveTextInfo: index="); outint(index, 0); outtext(", info=" & info); outimage;
		end;
		switch (1:4) index begin
			when 1 do currentModuleID :- info;
			when 2 do extIdent :- info;
			when 3 do extFile :- info;
			when 4 do SPORT_SysInsertDirName :- info;
			when none do begin outtext("NOT IMPL: giveTextInfo(index, info) " & info); outimage; exit(-1); end;
		end;
	end;


%    =================================================================
%    S-PORT Extension Procedure rts_utility.
%    =================================================================
%    
%    Register Error or Warning given
%    @param index case index
%    @param level not used

	procedure rts_utility(index, level); integer index, level; begin
%		if FEC_TraceLevel > 0 then begin
			outtext("rts_utility: index="); outint(index, 0); outtext(", level="); outint(level, 0); outtext("  Error or Warning given"); outimage;
%		end;
		
%		switch (1:5) index begin
%		when 0:			return; -- Note
%		when 1:			break; -- return; -- Warning
%		when 2:			break;-- return; -- Error
%		when 3:			break;-- return; -- COMMON Error
%		when 4:			break;-- return; -- Abort
%		when 5: -- newTag check-point with Stack trace
%			if (RTS_Option.FEC_Verbose)
%				RTS_UTIL.println("rts_utility: index=5: newTag should be replaced to newTTag(ident)");
%			break;
%		when none do
%			NOT_IMPLEMENTED("getIntInfo: " + index);
%		end;
		
		outtext("NOT IMPL: rts_utility("); outint(index, 0); outchar(','); outint(level, 0); outchar(')'); outimage; exit(-1);
	end;

%    =================================================================
%    S-PORT Extension Procedure setRuntimeOptions.
%    =================================================================
	procedure setRuntimeOptions; begin
		integer i; boolean more; text arg, file;
		-- Parse command line arguments.
		more := true; i := 0;
		while more do begin
			arg :- argv(i); i := i + 1;
			if arg = NOTEXT then more := false else begin
				arg.setpos(1);
				if arg.getchar = '-' then begin -- command line option
					-- Spesial S-Port Simula and Simuletta Options. Used by get/give ... info routines
					if arg = "-SPORT_SOURCE_FILE" then begin
						SPORT_SourceFileName :- argv(i); i := i+1;
						SourceDirName :- getParent(SPORT_SourceFileName);
					end
					else if arg = "-SPORT:listing"    then	 	 ListingFileName :- "#sysout"
					else if arg = "-SPORT:noConsole"  then	 	 noConsole := true
					else if arg = "-verbose"          then		 FEC_Verbose := 1
					else if arg = "-SPORT:traceScode" then		 FEC_TraceScode := 1
					else if arg = "-SPORT:SCodeFile"  then begin SPORT_SCodeFileName :- argv(i); i := i+1; end
					else if arg = "-SPORT:select" 	  then begin Selectors :- argv(i); i := i+1; end
					else if arg = "-SPORT:trace"      then begin FEC_TraceLevel := decode(argv(i)); i := i+1; end
%					else begin
%						outtext("ENVIR.INIT: Unknown option " & arg); outimage;
%						exit(-1);
%						help();
%					end;
				end else begin
					if file = NOTEXT then begin
						file :- arg;
						SPORT_SourceFileName :- arg;
						SourceDirName :- getParent(arg);
					end else begin
						outtext("ERROR: multiple input files specified"); outimage;
						outtext("File 1: " & file); outimage;
						outtext("File 2: " & arg); outimage;
%						help();
					end;
				end;
			end;
		end;	

		if FEC_TraceLevel > 0 then begin
			outtext("Begin Execution of Simula Program"); outimage;
			print_Options;
		end;

	end;

	


	integer procedure decode(t); text t; begin
		t.setpos(0);
		decode := t.getint;
	end;
	
	text procedure getParent(fn); text fn; begin
		text tmp; character c; integer lastSlashPos;
		tmp :- SPORT_SourceFileName.replace('\','/');
		getParent :- fn.sub(1, tmp.lastIndexOf('/'));
	end;

	text procedure getModuleName; begin
		-- return (new File(SPORT_SourceFileName).getName());
		text tmp; character c; integer lastSlashPos;
		tmp :- SPORT_SourceFileName.replace('\','/');
		lastSlashPos := tmp.lastIndexOf('/') + 2;
		getModuleName :- tmp.sub(lastSlashPos, tmp.length - lastSlashPos + 1);
	end;
	
	procedure print_Options; begin
		outtext("ENVIR.print_Options: FEC_Verbose:            "); outint(FEC_Verbose, 0); outimage;
		outtext("ENVIR.print_Options: FEC_TraceLevel:         "); outint(FEC_TraceLevel, 0); outimage;
		outtext("ENVIR.print_Options: ModuleName:             """ & getModuleName & """"); outimage;
		outtext("ENVIR.print_Options: SourceDirName:          """ & SourceDirName & """"); outimage;
		outtext("ENVIR.print_Options: SPORT_SourceFileName:   """ & SPORT_SourceFileName & """"); outimage;
		outtext("ENVIR.print_Options: SPORT_SysInsertDirName: """ & SPORT_SysInsertDirName & """"); outimage;
		outtext("ENVIR.print_Options: ListingFileName:        """ & ListingFileName & """"); outimage;
		outtext("ENVIR.print_Options: SCodeFileName():        """ & getSCodeFileName & """"); outimage;
		outtext("ENVIR.print_Options: FEC_TraceScode:         "); outint(FEC_TraceScode, 0); outimage;
	end;

	text procedure getSCodeFileName; begin
		text res;
		outtext("ENVIR.getSCodeFileName: " & SPORT_SCodeFileName); outimage;
		if SPORT_SCodeFileName ne notext
		then res :- SPORT_SCodeFileName
		else res :- createSubfileName("scode", getModuleName & ".scd");
		outtext("ENVIR.getSCodeFileName: " & res); outimage;
		getSCodeFileName :- res;
	end;

	text procedure createSubfileName(subdir, name_); text subdir, name_; begin
		createSubfileName :- SourceDirName & "/" & subdir & "/" & name_;
	end;

	


	INIT;
end;